// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCart = `-- name: CreateCart :one
INSERT INTO cart (User_UUID, product_code, amount)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, user_uuid, product_code, amount
`

type CreateCartParams struct {
	UserUuid    uuid.UUID
	ProductCode int32
	Amount      int32
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, arg.UserUuid, arg.ProductCode, arg.Amount)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const deleteAllCarts = `-- name: DeleteAllCarts :exec
delete  from cart
`

func (q *Queries) DeleteAllCarts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCarts)
	return err
}

const deleteCartProduct = `-- name: DeleteCartProduct :exec
delete from cart WHERE product_code = $1 and User_UUID = $2
`

type DeleteCartProductParams struct {
	ProductCode int32
	UserUuid    uuid.UUID
}

func (q *Queries) DeleteCartProduct(ctx context.Context, arg DeleteCartProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteCartProduct, arg.ProductCode, arg.UserUuid)
	return err
}

const deleteUserCart = `-- name: DeleteUserCart :exec
delete from cart WHERE User_UUID = $1
`

func (q *Queries) DeleteUserCart(ctx context.Context, userUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserCart, userUuid)
	return err
}

const getCartProduct = `-- name: GetCartProduct :one
SELECT id, user_uuid, product_code, amount FROM cart WHERE $1 = cart.User_UUID and $2 = cart.product_code
`

type GetCartProductParams struct {
	UserUuid    uuid.UUID
	ProductCode int32
}

func (q *Queries) GetCartProduct(ctx context.Context, arg GetCartProductParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartProduct, arg.UserUuid, arg.ProductCode)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const getUserCart = `-- name: GetUserCart :one
SELECT id, user_uuid, product_code, amount FROM cart WHERE $1 = cart.User_UUID
`

func (q *Queries) GetUserCart(ctx context.Context, userUuid uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getUserCart, userUuid)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCart = `-- name: UpdateCart :one
UPDATE cart
SET User_UUID = $1, product_code = $2,amount = $3
WHERE ID = $4
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartParams struct {
	UserUuid    uuid.UUID
	ProductCode int32
	Amount      int32
	ID          int32
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCart,
		arg.UserUuid,
		arg.ProductCode,
		arg.Amount,
		arg.ID,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCartAmount = `-- name: UpdateCartAmount :one
UPDATE cart SET amount = $1
WHERE ID = $2
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartAmountParams struct {
	Amount int32
	ID     int32
}

func (q *Queries) UpdateCartAmount(ctx context.Context, arg UpdateCartAmountParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartAmount, arg.Amount, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCartProduct = `-- name: UpdateCartProduct :one
UPDATE cart SET product_code = $1
WHERE ID = $2
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartProductParams struct {
	ProductCode int32
	ID          int32
}

func (q *Queries) UpdateCartProduct(ctx context.Context, arg UpdateCartProductParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartProduct, arg.ProductCode, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}

const updateCartUser = `-- name: UpdateCartUser :one
UPDATE cart SET User_UUID = $1
WHERE ID = $2
RETURNING id, user_uuid, product_code, amount
`

type UpdateCartUserParams struct {
	UserUuid uuid.UUID
	ID       int32
}

func (q *Queries) UpdateCartUser(ctx context.Context, arg UpdateCartUserParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartUser, arg.UserUuid, arg.ID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductCode,
		&i.Amount,
	)
	return i, err
}
